/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.model.jooq.tables;

import edu.java.scrapper.model.jooq.DefaultSchema;
import edu.java.scrapper.model.jooq.Keys;
import java.util.Arrays;
import java.util.List;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TgChatLink extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TG_CHAT_LINK</code>
     */
    public static final TgChatLink TG_CHAT_LINK = new TgChatLink();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>TG_CHAT_LINK.TG_CHAT_ID</code>.
     */
    public final TableField<Record, Long> TG_CHAT_ID = createField(DSL.name("TG_CHAT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>TG_CHAT_LINK.LINK_ID</code>.
     */
    public final TableField<Record, Long> LINK_ID = createField(DSL.name("LINK_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private TgChatLink(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private TgChatLink(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TG_CHAT_LINK</code> table reference
     */
    public TgChatLink(String alias) {
        this(DSL.name(alias), TG_CHAT_LINK);
    }

    /**
     * Create an aliased <code>TG_CHAT_LINK</code> table reference
     */
    public TgChatLink(Name alias) {
        this(alias, TG_CHAT_LINK);
    }

    /**
     * Create a <code>TG_CHAT_LINK</code> table reference
     */
    public TgChatLink() {
        this(DSL.name("TG_CHAT_LINK"), null);
    }

    public <O extends Record> TgChatLink(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, TG_CHAT_LINK);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.CONSTRAINT_816;
    }

    @Override
    @NotNull
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_8, Keys.CONSTRAINT_81);
    }

    private transient TgChat _tgChat;
    private transient Link _link;

    /**
     * Get the implicit join path to the <code>PUBLIC.TG_CHAT</code> table.
     */
    public TgChat tgChat() {
        if (_tgChat == null)
            _tgChat = new TgChat(this, Keys.CONSTRAINT_8);

        return _tgChat;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.LINK</code> table.
     */
    public Link link() {
        if (_link == null)
            _link = new Link(this, Keys.CONSTRAINT_81);

        return _link;
    }

    @Override
    @NotNull
    public TgChatLink as(String alias) {
        return new TgChatLink(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public TgChatLink as(Name alias) {
        return new TgChatLink(alias, this);
    }

    @Override
    @NotNull
    public TgChatLink as(Table<?> alias) {
        return new TgChatLink(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public TgChatLink rename(String name) {
        return new TgChatLink(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public TgChatLink rename(Name name) {
        return new TgChatLink(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public TgChatLink rename(Table<?> name) {
        return new TgChatLink(name.getQualifiedName(), null);
    }
}
